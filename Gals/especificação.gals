#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = LL
#RegularDefinitions
letra: [a-z]|[A-Z]
underline: _
dig19: [1-9]
dig09: [0-9]
caracter: [^\n\\\"]
WS : [\ \t\n\r]
comen_linha: \\\\.*
comen_bloco: /\*([^\*])*\*/
#Tokens
//tokens
identificador:{letra}({letra}|{dig09}|{underline}({letra}|{dig09}))*{underline}?
const_inteira: (0|{dig19}+{dig09}*)
const_real: (0|{dig19}+{dig09}*),{dig09}+
const_caracter: \"({caracter}*|\\\"|\\\\)*\"

//Palavras reservadas
bool       = identificador : "bool"
consts     = identificador : "consts"
def        = identificador : "def"
end        = identificador : "end"
execute    = identificador : "execute"
false      = identificador : "false"
float      = identificador : "float"
get        = identificador : "get"
ifFalse    = identificador : "ifFalse"
ifTrue     = identificador : "ifTrue"
input      = identificador : "input"
int        = identificador : "int"
print      = identificador : "print"
println    = identificador : "println"
set        = identificador : "set"
str        = identificador : "str"
true       = identificador : "true"
types      = identificador : "types"
var        = identificador : "var"
whileFalse = identificador : "whileFalse"
whileTrue  = identificador : "whileTrue"

//Símbolos especiais
":"
"("
")"
"="
":="
","
"&&"
"||"
"!"
"!="
"<"
"<="
">"
">="
"+"
"-"
"*"
"/"

//ignorar espaços em branco e comentários
 : {comen_linha}
 : {comen_bloco}
 : {WS}*
#NonTerminals
<forma_geral> 
<forma_geral_vazio> 
<lista_comandos> 
<lista_comandos_vazio> 
<comando> 
<comando2> 
<comando3> 
<comando4> 
<definicao_tipos> 
<definicao_tipo>
<lista_definicao_tipos_vazio>
<e_do_tipo> 
<simples> 
<composto> 
<lista_campos> 
<lista_campos1>
<campo> 
<definicao_constantes> 
<lista_id> 
<lista_id1>
<lista_id2>
<identificadores> 
<lista_identificadores> 
<valor> 
<const_logica> 
<declaracao_variaveis> 
<lista_variaveis> 
<lista_variaveis1> 
<variaveis> 
<tipo> 
<entrada_dados> 
<saida_dados> 
<lista_expressoes> 
<lis_exp> 
<condicao>
<expressao> 
<expressao1>
<elemento> 
<relacional> 
<relacional1>
<operador_relacional> 
<aritmetica> 
<aritmetica1> 
<termo> 
<termo1>
<fator> 
<fator1>
#Grammar
<forma_geral> ::= def <forma_geral_vazio> execute <lista_comandos>;
<forma_geral_vazio> ::= <definicao_tipos> <definicao_constantes> <declaracao_variaveis>;
<lista_comandos> ::= <comando> <lista_comandos_vazio>;
<lista_comandos_vazio> ::= <lista_comandos> | î;
<comando> ::= <entrada_dados> | <saida_dados> | "(" <expressao> ")" <comando2>;
<comando2> ::= ifFalse <condicao> | whileTrue ":" <condicao> | whileFalse ":" <condicao> | ifTrue <comando3>;
<comando3> ::= ":" <lista_comandos> <comando4>;
<comando4> ::= end | ifFalse ":" <lista_comandos> end;
<definicao_tipos> ::= types <definicao_tipo> <lista_definicao_tipos_vazio> | î;
<definicao_tipo> ::= identificador ":" <e_do_tipo>;
<lista_definicao_tipos_vazio> ::= <definicao_tipo> <lista_definicao_tipos_vazio> | î;
<e_do_tipo> ::= <simples> | <composto>;
<simples> ::= int | float | str | bool;
<composto> ::= "(" <lista_campos> ")";
<lista_campos> ::= <campo> <lista_campos1>;
<lista_campos1> ::= <lista_campos> | î;
<campo> ::= identificador ":" <simples>;
<definicao_constantes> ::= consts <lista_id> | î;
<lista_id> ::= <identificadores> <lista_id1>;
<lista_id1> ::= "=" <valor> <lista_id2>;
<lista_id2> ::= <lista_id> | î;
<identificadores> ::= identificador <lista_identificadores>;
<lista_identificadores> ::= "," identificador <lista_identificadores> | î;
<valor> ::= const_inteira | const_real | const_caracter | <const_logica>;
<const_logica> ::= true | false;
<declaracao_variaveis> ::= var <lista_variaveis> | î;
<lista_variaveis> ::= <variaveis> <lista_variaveis1>;
<lista_variaveis1> ::= <lista_variaveis> | î;
<variaveis> ::= <identificadores> ":" <tipo>;
<tipo> ::= <simples> | identificador;
<entrada_dados> ::= input "(" <identificadores> ")";
<saida_dados> ::= print "(" <lista_expressoes> ")" | println "(" <lista_expressoes> ")";
<lista_expressoes> ::= <expressao> <lis_exp>;
<lis_exp> ::= "," <lista_expressoes> | î;
<condicao> ::= ":" <lista_comandos> end;
<expressao> ::= <elemento> <expressao1>;
<expressao1> ::= "&&" <elemento> <expressao1> | "||" <elemento> <expressao1> | î;
<elemento> ::= <relacional> | true | false | "!" <elemento>;
<relacional> ::= <aritmetica> <relacional1>;
<relacional1> ::= <operador_relacional> <relacional1> | î;
<operador_relacional> ::= "=" | "!=" | "<" | "<=" | ">" | ">=";
<aritmetica> ::= <termo> <aritmetica1>;
<aritmetica1> ::= "+" <termo> <aritmetica1> | "-" <termo> <aritmetica1> | î;
<termo> ::= <fator> <termo1>;
<termo1> ::= "*" <fator> | "/" <fator> | î;
<fator> ::= const_inteira | const_real | const_caracter | "(" <expressao> ")" | "+" <fator> | "-" <fator> | identificador <fator1>;
<fator1> ::= get "(" identificador ")" | î;
