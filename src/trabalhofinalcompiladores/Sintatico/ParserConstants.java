package trabalhofinalcompiladores.Sintatico;

public interface ParserConstants
{
    int START_SYMBOL = 45;

    int FIRST_NON_TERMINAL    = 45;
    int FIRST_SEMANTIC_ACTION = 92;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        {  4,  3, -1, -1, -1, -1, -1, -1,  4, -1, -1, -1, -1,  4, -1,  3, -1,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 19, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 21, -1, -1, -1, -1, 22, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, 23, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, 25, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 34, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 37, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, 41, 41, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 42, 43, 44, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 51, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 55, -1, -1, -1, 54, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, 54, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 59, 59, 59, 59, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, 59, 59, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 63, 63, 63, 63, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, 63, 63, -1, -1 },
        { 66, 66, -1, -1, -1, -1, -1, -1, 66, -1, -1, -1, -1, 66, -1, 66, -1, 66, 66, -1, -1, -1, -1, -1, -1, -1, -1, 66, 66, -1, -1, 66, 64, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 67, 67, 67, 67, -1, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, 67, 67, -1, -1 },
        { -1, 71, 71, 71, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, 71, -1, -1 },
        { 73, 73, -1, -1, -1, -1, -1, -1, 73, -1, -1, -1, -1, 73, -1, 73, -1, 73, 73, -1, -1, -1, -1, -1, -1, -1, -1, 73, 73, 72, -1, 73, 73, 73, -1, 72, 72, 72, 72, 72, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, 75, 76, 77, 78, 79, -1, -1, -1, -1 },
        { -1, 80, 80, 80, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, 80, -1, -1 },
        { 83, 83, -1, -1, -1, -1, -1, -1, 83, -1, -1, -1, -1, 83, -1, 83, -1, 83, 83, -1, -1, -1, -1, -1, -1, -1, -1, 83, 83, 83, -1, 83, 83, 83, -1, 83, 83, 83, 83, 83, 81, 82, -1, -1 },
        { -1, 84, 84, 84, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 84, -1, -1 },
        { 87, 87, -1, -1, -1, -1, -1, -1, 87, -1, -1, -1, -1, 87, -1, 87, -1, 87, 87, -1, -1, -1, -1, -1, -1, -1, -1, 87, 87, 87, -1, 87, 87, 87, -1, 87, 87, 87, 87, 87, 87, 87, 85, 86 },
        { -1, 94, 88, 89, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 92, 93, -1, -1 },
        { 96, 96, -1, -1, -1, -1, -1, -1, 96, -1, -1, -1, 95, 96, -1, 96, -1, 96, 96, -1, -1, -1, -1, -1, -1, -1, -1, 96, 96, 96, -1, 96, 96, 96, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96 }
    };

    int[][] PRODUCTIONS = 
    {
        { 107,   8,  46,  10,  47, 108 },
        {  54,  63,  70 },
        {  49,  48 },
        {  47 },
        {   0 },
        {  75 },
        {  76 },
        {  28,  80,  29,  51 },
        {   2,  50 },
        {  31,  80 },
        {  20,  28,   2,  32,  80,  29 },
        {  14,  79 },
        {  26,  79 },
        {  25,  79 },
        {  15,  52 },
        {  27,  47,  53 },
        {   9 },
        {  14,  27,  47,   9 },
        {  23,  55,  56 },
        {   0 },
        {   2,  27,  57 },
        {  55,  56 },
        {   0 },
        {  58 },
        {  59 },
        {  17 },
        {  12 },
        {  21 },
        {   6 },
        {  28,  60,  29 },
        {  62,  61 },
        {  60 },
        {   0 },
        {   2,  27,  58 },
        {   7,  64 },
        {   0 },
        {  66,  30,  68,  65 },
        {  64 },
        {   0 },
        {   2,  67 },
        {  32,   2,  67 },
        {   0 },
        {   3 },
        {   4 },
        {   5 },
        {  69 },
        {  22 },
        {  11 },
        {  24,  71 },
        {   0 },
        {  73,  72 },
        {  71 },
        {   0 },
        {  66,  27,  74 },
        {  58 },
        {   2 },
        {  16,  28,  66,  29 },
        {  18,  28,  77,  29 },
        {  19,  28,  77,  29, 109 },
        {  80, 106,  78 },
        {  32,  77 },
        {   0 },
        {  27,  47,   9 },
        {  82,  81 },
        {  33,  82, 110,  81 },
        {  34,  82, 111,  81 },
        {   0 },
        {  83 },
        {  22, 103 },
        {  11, 104 },
        {  35,  82, 105 },
        {  86,  84 },
        {  85, 101,  86, 102 },
        {   0 },
        {  30 },
        {  36 },
        {  37 },
        {  38 },
        {  39 },
        {  40 },
        {  88,  87 },
        {  41,  88,  93,  87 },
        {  42,  88,  94,  87 },
        {   0 },
        {  90,  89 },
        {  43,  90,  89,  95 },
        {  44,  90,  96,  89 },
        {   0 },
        {   3,  97 },
        {   4,  98 },
        {   5, 112 },
        {  28,  80,  29 },
        {  41,  90,  99 },
        {  42,  90, 100 },
        {   2,  91 },
        {  13,  28,   2,  29 },
        {   0 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado fim de programa",
        "esperado identificador",
        "esperado constante_inteira",
        "esperado constante_real",
        "esperado constante_caracter",
        "esperado bool",
        "esperado consts",
        "esperado def",
        "esperado end",
        "esperado execute",
        "esperado false",
        "esperado float",
        "esperado get",
        "esperado ifFalse",
        "esperado ifTrue",
        "esperado input",
        "esperado int",
        "esperado print",
        "esperado println",
        "esperado set",
        "esperado str",
        "esperado true",
        "esperado types",
        "esperado var",
        "esperado whileFalse",
        "esperado whileTrue",
        "esperado \":\"",
        "esperado \"(\"",
        "esperado \")\"",
        "esperado \"=\"",
        "esperado \":=\"",
        "esperado \",\"",
        "esperado \"&&\"",
        "esperado \"||\"",
        "esperado \"!\"",
        "esperado \"!=\"",
        "esperado \"<\"",
        "esperado \"<=\"",
        "esperado \">\"",
        "esperado \">=\"",
        "esperado \"+\"",
        "esperado \"-\"",
        "esperado \"*\"",
        "esperado \"/\"",
        "esperado def", //"<forma_geral> inválido"
        "esperado consts, execute, types, var", //"<forma_geral_vazio> inválido",
        "esperado comando", //"<lista_comandos> inválido",
        "esperado fim de programa, comando, end, ifFalse",  //"<lista_comandos_vazio> inválido",
        "esperado comando", //"<comando> inválido",
        "esperado set, :=", //"<comando1> inválido",
        "esperado ifTrue, ifFalse, whileFalse, whileTrue",  //"<comando2> inválido",
        "esperado :",   //"<comando3> inválido",
        "esperado end, ifFalse",    //<comando4> inválido",
        "esperado conts, execute, types, var",  //"<definicao_tipos> inválido",
        "esperado identificador",   //"<definicao_tipo> inválido",
        "esperado identificador, consts, execute, var", //"<lista_definicao_tipos_vazio> inválido",
        "esperado bool, float, int, str, (", //"<e_do_tipo> inválido",
        "esperado bool, float, int, str, ", //"<simples> inválido",
        "esperado (",   //"<composto> inválido",
        "esperado identificador",   //"<lista_campos> inválido",
        "esperado identificador, )",    //"<lista_campos1> inválido",
        "esperado identificador",   //"<campo> inválido",
        "esperado consts, execute, var", //"<definicao_constantes> inválido",
        "esperado identificador",   //"<lista_id> inválido",
        "esperado identificador, execute, var", //"<lista_id2> inválido",
        "esperado identificador",   //"<identificadores> inválido",
        "esperado :, ), =, ','",    //"<lista_identificadores> inválido",
        "esperado constante int, constante float, constante str, false, true",	//"<valor> inválido",
        "esperado false, true",	//"<const_logica> inválido",
        "esperado execute, var",    //"<declaracao_variaveis> inválido",
        "esperado identificador",   //"<lista_variaveis> inválido",
        "esperado identificador, execute",  //"<lista_variaveis1> inválido",
        "esperado identificador",   //"<variaveis> inválido",
        "esperado identificador, bool, float, int, str", //"<tipo> inválido",
        "esperado input",   //"<entrada_dados> inválido",
        "esperado print, println",  //"<saida_dados> inválido",
        "esperado expressao", //"<lista_expressoes> inválido",
        "esperado ), ','",  //"<lis_exp> inválido",
        "esperado :",   //"<condicao> inválido",
        "esperado expressão", //"<expressao> inválido",
        "esperado expressão", //"<expressao1> inválido",
        "esperado expressão", //"<elemento> inválido",
        "esperado expressão", //"<relacional> inválido",
        "esperado expressão", //"<relacional1> inválido",
        "esperado expressão",	//"<operador_relacional> inválido",
        "esperado expressão", //"<aritmetica> inválido",
        "esperado expressão", //"<aritmetica1> inválido",
        "esperado expressão", //"<termo> inválido",
        "esperado expressão",  //"<termo1> inválido",
        "esperado expressão", //"<fator> inválido",
        "esperado expressão", //"<fator1> inválido"
    };
}
